# Pull the latest version of all rules and reference lists from Google SecOps and commit them to the GitHub repo.

name: Pull Latest Content

on:
  schedule:
  # Run daily at 23:05 UTC time
  #- cron: "5 23 * * *"

  # workflow_dispatch allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write
  # 'id-token: write' is required to allow GitHub's OIDC provider to create a JSON Web Token for every run
  id-token: write

defaults:  # <---- Add this section
  run:
    working-directory: ./tools/content_manager # Path relative to the repository root

jobs:
  pull-latest-content:
    runs-on: ubuntu-latest
    environment: .env

    env:
      LOGGING_LEVEL: ${{ vars.LOGGING_LEVEL }}
      GOOGLE_SECOPS_API_BASE_URL: ${{ vars.GOOGLE_SECOPS_API_BASE_URL }}
      GOOGLE_SECOPS_INSTANCE: ${{ vars.GOOGLE_SECOPS_INSTANCE }}
      AUTHORIZATION_SCOPES: ${{ vars.AUTHORIZATION_SCOPES }}
      GOOGLE_SECOPS_API_UPLOAD_BASE_URL: ${{ vars.GOOGLE_SECOPS_API_UPLOAD_BASE_URL }}


    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}
          workload_identity_provider: ${{ secrets.GOOGLE_CLOUD_WORKLOAD_IDENTITY_PROVIDER}}
          access_token_lifetime: 180s
          export_environment_variables: true
          create_credentials_file: true
          cleanup_credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"  # Caching pip dependencies

      - name: Install Python project dependencies
        run: pip install -r requirements_dev.txt

      # - name: Check Python code formatting with black
      #   run: python -m black google_secops_api content_manager --line-length 120 --check

      - name: Run tests using pytest
        run: pytest -v

      - name: Pull latest version of all rules from Google SecOps
        run: python -m content_manager rules get

      - name: Pull latest version of all data tables from Google SecOps
        run: python -m content_manager data-tables get

      - name: Pull latest version of all reference lists from Google SecOps
        run: python -m content_manager reference-lists get
    
      - name: Cleanup credential files
        run: rm -f gha-creds-*.json
    
      - name: Add files to git staging area
        run: git add rules rule_config.yaml data_tables data_table_config.yaml reference_lists reference_list_config.yaml

      - name: Run git status command
        run: git status  # For debugging

      - name: Ensure no untracked files
        run: git clean -fdx

      - name: Commit pending changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_URL: "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        run: |
          # git config user.name/email is already set in a previous step, which is good.
          # This condition checks if there are any changes STAGED for commit
          if ! git diff --cached --quiet; then
            echo "Staged changes detected. Committing..."
            git commit -m "latest content pulled from google secops api"
            
            echo "Pulling latest changes from remote main with rebase..."
            # Use -X theirs to auto-resolve simple conflicts by preferring remote changes.
            # Remove -X theirs if you prefer the build to fail on any conflict.
            git pull --rebase -X theirs ${{ env.REPO_URL }} main
            
            echo "Pushing changes to remote main..."
            git push ${{ env.REPO_URL }} main:main # Pushes local main to remote main
          else
            echo "No STAGED changes to commit."
            # Optional: Log if other non-staged/untracked files exist for debugging
            if [[ -n $(git status --porcelain) ]]; then
              echo "Note: Untracked files or unstaged changes are present but were not staged."
              git status # Shows full status for logs
            fi
          fi
      
      - name: Show last git commit message
        run: git log -1  # For debugging
